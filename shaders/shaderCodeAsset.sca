using namespace std;

// Entry point of the shader code asset
//
// @return color

#define PI 3.1415926535897932384626433832795

auto aspect(vec2 v)
{
  return v.y / v.x;
}

vec4 main(Texture2d tex, vec2 center, float pivot)
{
    auto p = fragment(getVertexTexCoord());
    
    auto c = center;
    
    auto cp = p - c;
    
    auto l_cp = length(cp);
    
    if (l_cp == 0.0) {
       return vec4(0);
    }
    
    // aspect-corrected cp
    
    // nearest edge point
    vec2 np;

    auto p00 = vec2(0, 0);
    auto acp00 = abs(aspect(c - p00));
    auto p10 = vec2(1, 0);
    auto acp10 = abs(aspect(c - p10));
    auto p11 = vec2(1, 1);
    auto acp11 = abs(aspect(c - p11));
    auto p01 = vec2(0, 1);
    auto acp01 = abs(aspect(p - p01));

    if (cp.y >= -cp.x * acp01 && cp.y >= cp.x * acp11) {
        // +y quadrant
        np = (1.0 - c.y) * vec2(cp.x / cp.y, 1);
    } else if (cp.y <= cp.x * acp11 && cp.y >= -cp.x * acp10) {
        // -x quadrant
        np = (1.0 - c.x) * vec2(1.0, cp.y / cp.x);
    } else if (cp.y <= -cp.x * acp10 && cp.y <= cp.x * acp00) {
        // -y quadrant
        np = -c.y * vec2(cp.x / cp.y, 1);
    } else if (cp.y >= cp.x * acp00 && cp.y <= -cp.x * acp01 ) {
        // +x quadrant
        np = -c.x * vec2(1, cp.y / cp.x);
    }
    
    
    // progress along cp -> np
    float t = abs(pivot - l_cp / length(np));
    
    // point to sample from
    vec2 uv = (c + mix(vec2(0), np, t));
    
    return tex.sample(uv);
}
