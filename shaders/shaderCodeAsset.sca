using namespace std;

// Entry point of the shader code asset
//
// @return color

#define PI 3.1415926535897932384626433832795

auto aspect(vec2 v)
{
  return v.x == 0.0 ? 0.0 : (v.y / v.x);
}

vec4 main(Texture2d tex, vec2 center, float pivot)
{
    auto p = fragment(getVertexTexCoord());
    
    auto c = center;
    
    auto cp = p - c;
    
    auto l_cp = length(cp);
    
    // aspect-corrected cp

    // c# = corner point
    // ac# = aspect of corner point
    auto ac = vec4(
      abs(aspect(p - vec2(0, 0))),
      abs(aspect(p - vec2(1, 0))),
      abs(aspect(p - vec2(1, 1))),
      abs(aspect(p - vec2(0, 1)))
    );

    // these are floats that represent bools if the point is in the specified quadrant
    auto ifs = vec4(
      cp.y > -cp.x * ac.w && cp.y >=  cp.x * ac.z, // +y
      cp.y >  cp.x * ac.x && cp.y <= -cp.x * ac.w, // +x
      cp.y < -cp.x * ac.y && cp.y <=  cp.x * ac.x, // -y
      cp.y <  cp.x * ac.z && cp.y >= -cp.x * ac.y  // -x
    );
   
    // closest points to the edge in each quadrant
    auto cpa = aspect(cp);
    auto cpb = aspect(cp.yx);
    auto cps = vec3(cpa, cpb, 1.0);

    auto ps = mat4(
       cps.yz00, // +y
       cps.zx00, // +x
       cps.yz00, // -y
       cps.zx00  // -x
    );

    auto ks = vec4(
      1.0 - c.y,
      0.0 - c.x,
      0.0 - c.y,
      1.0 - c.x
    );
    
    // nearest edge point in this quadrant
    auto ep = (ps * (ifs * ks)).xy;

    // progress along cp -> np
    float t = abs(pivot - l_cp / length(ep));
    
    // point to sample from
    vec2 uv = (c + mix(vec2(0), ep, t));
    
    return tex.sample(uv);
}
